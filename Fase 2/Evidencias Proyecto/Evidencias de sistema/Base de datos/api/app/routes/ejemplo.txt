# app/routes/<tabla>.py
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.orm import Session
from app.db import get_db
from app.schemas.common import Page, Msg
from app.schemas.<tabla> import <Tabla>Create, <Tabla>Update, <Tabla>Out
from app.services import <tabla> as svc

router = APIRouter(prefix="/<tabla>", tags=["<Tabla>"])

@router.get("", response_model=Page[<Tabla>Out])
def list_<tabla>(page: int = 1, page_size: int = 20, db: Session = Depends(get_db)):
    items, total = svc.list_(db, skip=(page-1)*page_size, limit=page_size)
    return Page(items=items, total=total, page=page, page_size=page_size)

@router.get("/{id_}", response_model=<Tabla>Out)
def get_<tabla>(id_: int, db: Session = Depends(get_db)):
    obj = svc.get(db, id_)
    if not obj: raise HTTPException(status_code=404, detail="Not found")
    return obj

@router.post("", response_model=<Tabla>Out, status_code=status.HTTP_201_CREATED)
def create_<tabla>(payload: <Tabla>Create, db: Session = Depends(get_db)):
    return svc.create(db, payload)

@router.patch("/{id_}", response_model=<Tabla>Out)
def update_<tabla>(id_: int, payload: <Tabla>Update, db: Session = Depends(get_db)):
    obj = svc.update(db, id_, payload)
    if not obj: raise HTTPException(status_code=404, detail="Not found")
    return obj

@router.delete("/{id_}", response_model=Msg)
def delete_<tabla>(id_: int, db: Session = Depends(get_db)):
    ok = svc.delete(db, id_)
    if not ok: raise HTTPException(status_code=404, detail="Not found")
    return Msg(message="Deleted")
